/*
 * Analysis Example
 * Operate data from devices
 *
 * Read information from a variable generated by devices,
 * run a simple calculation in real-time, and create a new variable with the output.
 *
 * Instructions
 * To run this analysis you need to add a device token to the environment variables,
 * To do that, go to your device, then token and copy your token.
 * Go the the analysis, then environment variables,
 * type device_token on key, and paste your token on value
 */

const { Analysis, Device, Utils } = require("@tago-io/sdk");

// The function myAnalysis will run when you execute your analysis
async function myAnalysis(context) {
  // reads the values from the environment and saves it in the variable env_vars
  const env_vars = Utils.envToJson(context.environment);

  if (!env_vars.device_token) {
    return context.log("Missing device_token environment variable");
  }

  const device = new Device({ token: env_vars.device_token });

  // create the filter options to get the data from TagoIO
  const filter = {
    variable: "entrance",
    query: "last_item",
  };

  const filter2 = {
    variable: "totPpl15_12",
    query: "last_item",
  };

  const filter3 = {
    variable: "out",
    query: "last_item",
  };

  const resultArray = await device.getData(filter).catch(() => null);
  const resultArray2 = await device.getData(filter2).catch(() => null);
  const resultArray3 = await device.getData(filter3).catch(() => null);

  // Check if the array is not empty
  if (!resultArray || !resultArray[0]) {
    return context.log("Empty Array");
  }

  // query:last_item always returns only one value
  const pplinValue = resultArray[0].value;
  const pplinTime = resultArray[0].time;

  const totValue = resultArray2[0].value;
  const totTime = resultArray2[0].time;

  const pploutValue = resultArray3[0].value;


  // print to the console at TagoIO
  /*
  context.log(
    `The last record of the water_level is ${totValue}. It was inserted at ${totTime}`
  );
  */
  // Multiplies the water_level value by 2 and inserts it in another variable
  const obj_to_save = {
    variable: "totPpl15_12",
    value:totValue + (pplinValue-pploutValue),
  };
  /*
  const obj_to_save2 = {
    variable: "pplin",
    value: pplinValue,
  };
  */
  try {
    await device.sendData(obj_to_save);
    context.log(
      `Successfully Inserted, entrance : ${pplinValue} , out : ${pploutValue}`
      );
    context.log(
      `old total : ${totValue}`
      );
  } catch (error) {
    context.log("Error when inserting:", error);
  }
}

module.exports = new Analysis(myAnalysis);

// To run analysis on your machine (external)
// module.exports = new Analysis(myAnalysis, { token: "YOUR-TOKEN" });